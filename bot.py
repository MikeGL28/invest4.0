import os
import logging
import pandas as pd
import numpy as np
import nest_asyncio
import matplotlib.pyplot as plt
import io
import math
from datetime import datetime
from telegram import Update, ForceReply, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from config import TG_BOT_TOKEN
from config import TICKERS  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–∫–µ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio
nest_asyncio.apply()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
RESULTS_PATH = 'results/all_predictions.csv'
TOP_STOCKS_PATH = 'results/top_stocks.csv'
BACKTEST_SUMMARY = 'backtest_results/backtest_summary.txt'
BACKTEST_CHART = 'backtest_results/comprehensive_backtest_analysis.png'

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
üìà *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ü–∏–π!*

–Ø –∏—Å–ø–æ–ª—å–∑—É—é –∞–Ω—Å–∞–º–±–ª—å –∏–∑ —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π (LightGBM, XGBoost –∏ LSTM) –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∞–∫—Ü–∏–π –Ω–∞ 15 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è:
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏—è –¢–û–ü-3 –∞–∫—Ü–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
‚Ä¢ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

# –ö–Ω–æ–ø–∫–∏
BUTTON_TOP = "üìà –ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-3 –∞–∫—Ü–∏–π"
BUTTON_HELP = "‚ùì –°–ø—Ä–∞–≤–∫–∞"
BUTTON_STRATEGY = "üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
BUTTON_STOCKS = "üîç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ü–∏–∏"
BUTTON_RECOMMEND = "üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_TICKER = "CHOOSING_TICKER"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    buttons = [
        [KeyboardButton(BUTTON_TOP), KeyboardButton(BUTTON_STRATEGY)],
        [KeyboardButton(BUTTON_STOCKS), KeyboardButton(BUTTON_RECOMMEND)],
        [KeyboardButton(BUTTON_HELP)]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–∫–µ—Ä–∞–º–∏
def get_ticker_keyboard():
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫—É
    ticker_buttons = [KeyboardButton(ticker) for ticker in TICKERS]
    keyboard = [ticker_buttons[i:i + 3] for i in range(0, len(ticker_buttons), 3)]
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if update.message:
        await update.message.reply_text(
            WELCOME_MESSAGE,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
    else:
        await update.callback_query.message.reply_text(
            WELCOME_MESSAGE,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìà /top - –ü–æ–∫–∞–∑–∞—Ç—å –¢–û–ü-3 –∞–∫—Ü–∏–π
üîç /stock [–¢–ò–ö–ï–†] - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /stock GAZP)
üìä /strategy - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
üí° /recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é
‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∞–∫—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–∏–∫–µ—Ä

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:*
–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ—Å–ª–µ 18:00 –ø–æ –ú–°–ö
"""
    if update.message:
        await update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
    else:
        await update.callback_query.message.reply_text(help_text, parse_mode='Markdown',
                                                       reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–û–ü-3 –∞–∫—Ü–∏–π
async def send_top_stocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not os.path.exists(TOP_STOCKS_PATH):
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã.")
            return

        df = pd.read_csv(TOP_STOCKS_PATH)
        if df.empty:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¢–û–ü-3 –∞–∫—Ü–∏–π.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        df = df.sort_values(by='expected_return', ascending=False).head(3)

        message = "üèÜ *–¢–û–ü-3 –ê–ö–¶–ò–ô –ö –ü–û–ö–£–ü–ö–ï –ù–ê 15 –î–ù–ï–ô*\n\n"
        message += "üìå *–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)*\n\n"

        for idx, row in df.iterrows():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                lower_bound = float(row['expected_return_lower'])
                upper_bound = float(row['expected_return_upper'])
            except:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ—Ä—Ç–µ–∂ –∏–∑ expected_return_range
                    expected_range = str(row['expected_return_range']).replace('(', '').replace(')', '')
                    lower_bound_str, upper_bound_str = expected_range.split(',')
                    lower_bound = float(lower_bound_str.strip())
                    upper_bound = float(upper_bound_str.strip())
                except:
                    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    lower_bound = max(0, float(row['expected_return']) * 0.5)
                    upper_bound = float(row['expected_return']) * 1.5

            expected_return = float(row['expected_return'])

            message += f"üìà *{row['ticker']}*\n"
            message += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: *{expected_return:.2f}%*\n"
            message += f"‚Ä¢ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: [{lower_bound:.2f}% - {upper_bound:.2f}%]\n"
            message += f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{row['ensemble_growth_prob']:.1f}%*\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞
            if 'composite_score' in row and not pd.isna(row['composite_score']) and row['composite_score'] != 0:
                message += f"‚Ä¢ –°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä: *{row['composite_score']:.1f}*\n\n"
            else:
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
                composite_score = calculate_composite_score(expected_return, row['ensemble_growth_prob'])
                message += f"‚Ä¢ –°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä: *{composite_score:.1f}*\n\n"

        message += "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –≤—ã—à–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä –∏ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Ç–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏."

        if update.message:
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(message, parse_mode='Markdown',
                                                           reply_markup=get_main_keyboard())

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(error_msg, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async def send_strategy_performance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not os.path.exists(BACKTEST_SUMMARY):
            await update.message.reply_text(
                "üìä –î–∞–Ω–Ω—ã–µ –æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `python backtest.py`",
                reply_markup=get_main_keyboard()
            )
            return

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(BACKTEST_SUMMARY, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä *–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –¢–û–†–ì–û–í–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
        for line in lines[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if ':' in line:
                key, value = line.strip().split(':', 1)
                message += f"‚Ä¢ *{key.strip()}*: {value.strip()}\n"

        message += "\nüìå *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:*\n"
        message += "‚Ä¢ *Win Rate*: >55% - –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, 45-55% - —É–º–µ—Ä–µ–Ω–Ω–∞—è, <45% - –Ω–∏–∑–∫–∞—è\n"
        message += "‚Ä¢ *Profit Factor*: >1.5 - –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å, >1.0 - —É–º–µ—Ä–µ–Ω–Ω–∞—è, <1.0 - –Ω–∏–∑–∫–∞—è\n"
        message += "‚Ä¢ *Sharpe Ratio*: >1.0 - –≤—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, >0.5 - —É–º–µ—Ä–µ–Ω–Ω–∞—è, <0.5 - –Ω–∏–∑–∫–∞—è\n\n"
        message += "üí° *–°–æ–≤–µ—Ç:* –ò–¥–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(message, parse_mode='Markdown',
                                                           reply_markup=get_main_keyboard())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(BACKTEST_CHART):
            with open(BACKTEST_CHART, 'rb') as photo:
                if update.message:
                    await update.message.reply_photo(photo, caption="üìà –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                else:
                    await update.callback_query.message.reply_photo(photo, caption="üìà –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(error_msg, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏
async def choose_stock(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['state'] = CHOOSING_TICKER
    await update.message.reply_text(
        "üîç *–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏* (–Ω–∞–ø—Ä–∏–º–µ—Ä, GAZP, SBER, VTBR)\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        parse_mode='Markdown',
        reply_markup=get_ticker_keyboard()
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞
def calculate_composite_score(expected_return, ensemble_growth_prob):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    –°–∫–æ—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ (—É–∂–µ –≤ %)
    growth_prob_score = ensemble_growth_prob / 100.0

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–ø—Ä–∏–≤–æ–¥–∏–º –∫ —à–∫–∞–ª–µ 0-1)
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤—ã—à–µ 10% - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ
    expected_return_score = min(expected_return / 10.0, 1.0)
    expected_return_score = max(expected_return_score, 0.0)

    # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
    composite_score = (0.7 * growth_prob_score + 0.3 * expected_return_score) * 100

    return composite_score


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
async def send_stock_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE, ticker=None) -> None:
    if not ticker:
        ticker = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if ticker == "üîô –ù–ê–ó–ê–î":
        context.user_data.clear()
        await start(update, context)
        return

    try:
        if not os.path.exists(RESULTS_PATH):
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã.")
            return

        df = pd.read_csv(RESULTS_PATH)
        stock_data = df[df['ticker'] == ticker]

        if stock_data.empty:
            await update.message.reply_text(
                f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ü–∏–∏ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä.",
                reply_markup=get_ticker_keyboard()
            )
            return

        row = stock_data.iloc[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        current_price = float(row['current_price'])
        expected_return = float(row['expected_return'])

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            lower_bound = float(row['expected_return_lower'])
            upper_bound = float(row['expected_return_upper'])
        except:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ—Ä—Ç–µ–∂ –∏–∑ expected_return_range
                expected_range = str(row['expected_return_range']).replace('(', '').replace(')', '')
                lower_bound_str, upper_bound_str = expected_range.split(',')
                lower_bound = float(lower_bound_str.strip())
                upper_bound = float(upper_bound_str.strip())
            except:
                # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                lower_bound = max(0, expected_return * 0.5)
                upper_bound = expected_return * 1.5

        final_price = current_price * (1 + expected_return / 100)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *–ü–†–û–ì–ù–û–ó –ü–û –ê–ö–¶–ò–ò {ticker}*\n\n"
        message += f"üí∞ *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞*: {current_price:.2f} —Ä—É–±.\n"
        message += f"üìà *–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ —á–µ—Ä–µ–∑ 15 –¥–Ω–µ–π*: {final_price:.2f} —Ä—É–±.\n"
        message += f"üéØ *–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å*: *{expected_return:.2f}%*\n"
        message += f"üìè *90% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª*: [{lower_bound:.2f}% - {upper_bound:.2f}%]\n"
        message += f"‚úÖ *–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞*: *{row['ensemble_growth_prob']:.1f}%*\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞
        if 'composite_score' in row and not pd.isna(row['composite_score']) and row['composite_score'] != 0:
            message += f"‚≠ê *–°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä*: *{row['composite_score']:.1f}*\n\n"
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
            composite_score = calculate_composite_score(expected_return, row['ensemble_growth_prob'])
            message += f"‚≠ê *–°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä*: *{composite_score:.1f}*\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö
        message += "üß† *–ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:*\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            lgb_weight = float(row['lgb_weight'])
        except:
            lgb_weight = 0.33

        try:
            xgb_weight = float(row['xgb_weight'])
        except:
            xgb_weight = 0.33

        try:
            lstm_weight = float(row['lstm_weight'])
        except:
            lstm_weight = 0.33

        message += f"‚Ä¢ LightGBM: {row['lgb_growth_prob']:.1f}% (–≤–µ—Å: {lgb_weight:.2f})\n"
        message += f"‚Ä¢ XGBoost: {row['xgb_growth_prob']:.1f}% (–≤–µ—Å: {xgb_weight:.2f})\n"
        message += f"‚Ä¢ LSTM: {row['lstm_growth_prob']:.1f}% (–≤–µ—Å: {lstm_weight:.2f})\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if expected_return > 2.0 and row['ensemble_growth_prob'] > 60:
            message += "‚úÖ *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø*: –°–ò–õ–¨–ù–´–ô –ü–û–ö–£–ü–ê–¢–¨\n"
            message += "–ê–∫—Ü–∏—è –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ."
        elif expected_return > 0.5 and row['ensemble_growth_prob'] > 50:
            message += "‚ö†Ô∏è *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø*: –£–ú–ï–†–ï–ù–ù–´–ô –ü–û–ö–£–ü–ê–¢–¨\n"
            message += "–ê–∫—Ü–∏—è –∏–º–µ–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –Ω–æ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é."
        else:
            message += "‚ùå *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø*: –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–û–ö–£–ü–ö–ï\n"
            message += "–ê–∫—Ü–∏—è –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(message, parse_mode='Markdown',
                                                           reply_markup=get_main_keyboard())

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if 'shap_explanation' in row and row['shap_explanation'] and row['shap_explanation'] != '[]':
            try:
                # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
                features = str(row['shap_explanation']).strip('[]').replace("'", "").split(',')
                features = [f.strip() for f in features if f.strip()]

                if features:
                    interpretation = "\n\nüîç *–û–°–ù–û–í–ù–´–ï –î–†–ê–ô–í–ï–†–´ –ü–†–û–ì–ù–û–ó–ê:*\n"
                    for i, feature in enumerate(features[:5], 1):
                        interpretation += f"{i}. {feature}\n"

                    interpretation += "\nüí° *–ö–∞–∫ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:*\n"
                    interpretation += "–≠—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã –æ–∫–∞–∑–∞–ª–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏."

                    if update.message:
                        await update.message.reply_text(interpretation, parse_mode='Markdown')
                    else:
                        await update.callback_query.message.reply_text(interpretation, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
                pass

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–æ–≥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if 'historical_analogues' in row and row['historical_analogues'] and row['historical_analogues'] != '[]':
            try:
                # –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
                analogues_str = str(row['historical_analogues'])

                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç np.float64
                analogues_str = analogues_str.replace('np.float64(', '').replace(')', '')

                analogues = eval(analogues_str)

                if analogues:
                    history_msg = "\n\nüï∞Ô∏è *–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –ê–ù–ê–õ–û–ì–ò:*\n"
                    for i, pattern in enumerate(analogues[:3], 1):
                        trend = "üìà" if pattern['trend'] == 'up' else "üìâ"
                        similarity = pattern['similarity']
                        future_return = pattern['future_return']
                        date_str = pattern['date']

                        history_msg += f"{i}. {date_str} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2f}) {trend} {future_return:.2%}\n"

                    history_msg += "\nüí° *–ö–∞–∫ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:*\n"
                    history_msg += "–≠—Ç–∏ –ø–µ—Ä–∏–æ–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ö–æ–∂–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."

                    if update.message:
                        await update.message.reply_text(history_msg, parse_mode='Markdown')
                    else:
                        await update.callback_query.message.reply_text(history_msg, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–æ–≥–æ–≤: {e}")
                pass

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {str(e)}"
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(error_msg, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def send_personal_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not os.path.exists(RESULTS_PATH):
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        df = pd.read_csv(RESULTS_PATH)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        df['expected_return'] = pd.to_numeric(df['expected_return'], errors='coerce')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        df['ensemble_growth_prob'] = pd.to_numeric(df['ensemble_growth_prob'], errors='coerce')

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'composite_score' not in df.columns or df['composite_score'].isna().all():
            df['composite_score'] = df.apply(
                lambda x: calculate_composite_score(x['expected_return'], x['ensemble_growth_prob']),
                axis=1
            )

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        recommendations = df[
            (df['expected_return'] > 2.0) &
            (df['ensemble_growth_prob'] > 60)
            ].sort_values(by='composite_score', ascending=False)

        if recommendations.empty:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∏—â–µ–º —É–º–µ—Ä–µ–Ω–Ω—ã–µ
            recommendations = df[
                (df['expected_return'] > 0.5) &
                (df['ensemble_growth_prob'] > 50)
                ].sort_values(by='composite_score', ascending=False)

        message = "üí° *–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò*\n\n"

        if recommendations.empty:
            message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ü–∏–π, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫ –ø–æ–∫—É–ø–∫–µ.\n"
            message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ä—ã–Ω–∫–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        else:
            message += "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ü–∏–∏:\n\n"

            for idx, row in recommendations.head(3).iterrows():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                try:
                    lower_bound = float(row['expected_return_lower'])
                    upper_bound = float(row['expected_return_upper'])
                except:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ—Ä—Ç–µ–∂ –∏–∑ expected_return_range
                        expected_range = str(row['expected_return_range']).replace('(', '').replace(')', '')
                        lower_bound_str, upper_bound_str = expected_range.split(',')
                        lower_bound = float(lower_bound_str.strip())
                        upper_bound = float(upper_bound_str.strip())
                    except:
                        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        lower_bound = max(0, float(row['expected_return']) * 0.5)
                        upper_bound = float(row['expected_return']) * 1.5

                expected_return = float(row['expected_return'])
                growth_prob = float(row['ensemble_growth_prob'])

                message += f"üìà *{row['ticker']}*\n"
                message += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: *{expected_return:.2f}%*\n"
                message += f"‚Ä¢ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: [{lower_bound:.2f}% - {upper_bound:.2f}%]\n"
                message += f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: *{growth_prob:.1f}%*\n"
                message += f"‚Ä¢ –°–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä: *{row['composite_score']:.1f}*\n\n"

            message += "‚úÖ *–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            message += "–≠—Ç–∏ –∞–∫—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –æ–∂–∏–¥–∞–µ–º—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ.\n\n"
            message += "üìå *–°–æ–≤–µ—Ç:* –î–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞."

        if update.message:
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(message, parse_mode='Markdown',
                                                           reply_markup=get_main_keyboard())

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}"
        if update.message:
            await update.message.reply_text(error_msg, reply_markup=get_main_keyboard())
        else:
            await update.callback_query.message.reply_text(error_msg, reply_markup=get_main_keyboard())


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('state') == CHOOSING_TICKER:
        await send_stock_forecast(update, context, text)
        context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    if text == BUTTON_TOP or text.lower() == "/top" or text.lower().startswith("/top@"):
        await send_top_stocks(update, context)
    elif text == BUTTON_STRATEGY or text.lower() == "/strategy" or text.lower().startswith("/strategy@"):
        await send_strategy_performance(update, context)
    elif text == BUTTON_STOCKS or text.lower() == "/stock" or text.lower().startswith("/stock@"):
        await choose_stock(update, context)
    elif text == BUTTON_RECOMMEND or text.lower() == "/recommend" or text.lower().startswith("/recommend@"):
        await send_personal_recommendations(update, context)
    elif text == BUTTON_HELP or text.lower() == "/help" or text.lower().startswith("/help@"):
        await help_command(update, context)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ç–∏–∫–µ—Ä–æ–º
        if text.upper() in [t.upper() for t in TICKERS]:
            await send_stock_forecast(update, context, text.upper())
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏.",
                reply_markup=get_main_keyboard()
            )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    application = ApplicationBuilder().token(TG_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("top", send_top_stocks))
    application.add_handler(CommandHandler("strategy", send_strategy_performance))
    application.add_handler(CommandHandler("stock", choose_stock))
    application.add_handler(CommandHandler("recommend", send_personal_recommendations))

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.run_polling()


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    import asyncio

    asyncio.run(main())